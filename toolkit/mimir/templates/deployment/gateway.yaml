apiVersion: apps/v1
kind: Deployment
metadata:
  name: mimir-distributed-gateway
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/name: mimir-distributed
    app.kubernetes.io/instance: mimir
    app.kubernetes.io/component: gateway
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir-distributed
      app.kubernetes.io/instance: mimir
      app.kubernetes.io/component: gateway
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mimir-distributed
        app.kubernetes.io/instance: mimir
        app.kubernetes.io/component: gateway
    spec:
{{ if eq .Values.minikube false }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/name: mimir-distributed
                  app.kubernetes.io/instance: mimir
                  app.kubernetes.io/component: gateway
              topologyKey: kubernetes.io/hostname
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: mimir-distributed
                    app.kubernetes.io/instance: mimir
                    app.kubernetes.io/component: gateway
                topologyKey: topology.kubernetes.io/zone
{{ end }}
      serviceAccountName: mimir-distributed
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
        seccompProfile:
          type: RuntimeDefault
      terminationGracePeriodSeconds: 30
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: mimir-distributed
              app.kubernetes.io/instance: mimir
              app.kubernetes.io/component: gateway
      volumes:
        - name: config
          configMap:
            name: mimir-distributed-gateway
        - name: temp
          emptyDir: {}
        - name: docker-entrypoint-d-override
          emptyDir: {}
      containers:
        - name: nginx
          image: docker.io/nginxinc/nginx-unprivileged:1.22-alpine
          imagePullPolicy: IfNotPresent
          ports:
            - name: http-metric
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http-metric
            initialDelaySeconds: 30
          readinessProbe:
            httpGet:
              path: /
              port: http-metric
            initialDelaySeconds: 15
            timeoutSeconds: 1
{{ if eq .Values.setresources true }}
          resources:
            requests:
              cpu: 1
              memory: 512Mi
            limits:
              cpu: 1
              memory: 512Mi
{{ end }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          volumeMounts:
            - name: config
              mountPath: /etc/nginx
            - name: temp
              mountPath: /tmp
            - name: docker-entrypoint-d-override
              mountPath: /docker-entrypoint.d

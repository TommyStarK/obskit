#!/usr/local/bin/bash

declare -a binaries=(
	"helm"
	"kubectl"
)

declare -A charts=(
	["agent"]="agent"
	["grafana"]="grafana"
	["loki"]="loki-distributed"
	["mimir"]="mimir-distributed"
	["tempo"]="tempo-distributed"
)

declare -a tools=(
	"agent"
	"grafana"
	"loki"
	"mimir"
	"tempo"
)

__info() {
	timestamp=`TZ=UTC date +%Y-%m-%d.%H:%M:%S`
	echo "[$timestamp] $1"
}

__exit_on_failure() {
	[ $? -ne 0 ] && __info $1 && exit 1
}

__k8s_context_handler() {
	if [ ! -z "$CLUSTER" ]; then
		kubectl config use-context $CLUSTER >/dev/null 2>&1
		__exit_on_failure
	fi
}

helm::template() {
	local targets=()
	if [ $# -eq 0 ]; then
		targets=("${tools[@]}")
	else
		targets+=("$1")
	fi

	for target in "${targets[@]}"; do
		local chart="${charts[$target]}"

		if [ -z "$chart" ]; then
			__info "unknown template: $target"
			exit 1
		else
			__info "rendering chart template: $chart"

			rm -rf ./toolkit/$target/manifests
			mkdir -p ./toolkit/$target/manifests

			tmp=$(mktemp -d -t chart-$target.XXXXXX)

			helm template tmp ./toolkit/$target/ --output-dir $tmp >/dev/null
			__exit_on_failure

			mv $tmp/$chart/templates/* ./toolkit/$target/manifests/
			rm -rf $tmp
		fi
	done
}

delete() {
	__k8s_context_handler

	IFS=','
	read -a targets <<< "$TARGET"

	for target in "${targets[@]}"; do
		helm uninstall $target
	done
}

deploy_agent() {
	__k8s_context_handler
	__info "deploy agent on cluster: $(kubectl config current-context)"
	helm install --name-template agent toolkit/agent -f toolkit/agent/values.yaml
}

render_template() {
	if [ -z "$TARGET" ]; then
		helm::template
	else
		IFS=','
		read -a targets <<< "$TARGET"

		for target in "${targets[@]}"; do
			helm::template $target
		done
	fi
}

setup_cluster() {
	__k8s_context_handler

	if [ -z "$TARGET" ]; then
		__info "setup LGTM stack to cluster: $(kubectl config current-context)"
		helm install --name-template loki toolkit/loki -f toolkit/loki/values.yaml
		helm install --name-template mimir toolkit/mimir -f toolkit/mimir/values.yaml
		helm install --name-template tempo toolkit/tempo -f toolkit/tempo/values.yaml
		helm install --name-template grafana toolkit/grafana -f toolkit/grafana/values.yaml
	else
		IFS=','
		read -a targets <<< "$TARGET"

		for target in "${targets[@]}"; do
			if [ -z "${charts[$target]}" ]; then
				__info "unknown target: $target"
				exit 1
			else
				__info "deploying $target to cluster: $(kubectl config current-context)"
				helm install --name-template $target toolkit/$target -f toolkit/$target/values.yaml
			fi
		done
	fi
}

for binary in "${binaries[@]}"; do
	! command -v $binary >/dev/null 2>&1 && __info "$binary not found" && exit 1
done

for i in "$@"; do
	case $i in
		-t=*|--target=*)
		TARGET="${i#*=}"
		shift # past argument=value
		;;
		-c=*|--cluster=*)
		CLUSTER="${i#*=}"
		shift # past argument=value
		;;
		--setup-cluster)
		CLUSTER_SETUP=YES
		shift # past argument with no value
		;;
		--deploy-agent)
		AGENT_DEPLOY=YES
		shift # past argument with no value
		;;
		--delete)
		DELETE=YES
		shift # past argument with no value
		;;
		--render-template)
		RENDERING_TEMPLATE=YES
		shift # past argument with no value
		;;
		-h|--help)
		shift # past argument with no value
		cat << EOF
obskit - Observability toolkit for Kubernetes

Usage: 	obskit [options] --deploy-agent
	obskit [options] --render-template
	obskit [options] --setup-cluster
	obskit [options] --delete

Options:
	-c | --cluster    Specify Kubernetes cluster
	-t | --target     Grafana tool (grafana,loki,tempo,mimir,grafana-agent)

Examples:
	# Render templates for Tempo and Loki
	./obskit --render-template --target=tempo,loki

	# Deploy Grafana Agent to minikube
	./obskit --deploy-agent --cluster=minikube

	# Deploy the LGTM stack to Kubernetes cluster 'demo'
	./obskit --setup-cluster --cluster=demo

	# Deploy Loki and Mimir to Kubernetes cluster 'demo'
	./obskit --setup-cluster -c=demo -t=loki,mimir

	# Delete Loki and Mimir from Kubernetes cluster 'demo'
	./obskit -c=demo -t=loki,mimir --delete
EOF
		;;
		-*|--*)
		echo "Unknown option $i, see -h | --help flag"
		exit 1
		;;
		*)
		;;
	esac
done

if [[ "$AGENT_DEPLOY" = "YES" ]]; then
    deploy_agent
elif [[ "$RENDERING_TEMPLATE" = "YES" ]]; then
    render_template
elif [[ "$CLUSTER_SETUP" = "YES" ]]; then
    setup_cluster
elif [[ "$DELETE" = "YES" ]]; then
    delete
fi
